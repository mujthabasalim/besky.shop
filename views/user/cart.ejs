<%- include('../partials/header') %>

<style>
  .img-fluid {
    width: 80px;
  }

  .image-fluid-sm {
    width: 120px;
  }

  #quantity-input,
  .quantity-input {
    max-width: 50px;
    min-width: 30px;
    padding: 0;
    border: none;
  }

  .quantity-selector {
    width: max-content;
    border: solid 1px;
    border-radius: 5px;
  }

  .count-btn {
    border: none;
    outline: none;
    background: none;
  }

  .mobile-card p {
    font-size: 14px;
  }

  .mobile-card .btn {
    font-size: 14px;
    padding: 5px;
  }

  .mobile-card input {
    font-size: 14px;
    padding: 4px;
    max-width: 20px;
  }
</style>

<div class="container mt-5">
  <h3 class="mb-4">Shop Cart</h3>
  <div class="row">
    <% if (cartItems.length > 0) { %>
      <div class="col-lg-8 col-md-12">
        <div class="d-none d-md-block">
          <table class="table text-center">
            <thead>
              <tr>
                <th scope="col" class="text-start">Product</th>
                <th scope="col">Quantity</th>
                <th scope="col">Total</th>
                <th scope="col"></th>
              </tr>
            </thead>
            <tbody class="text-center">
              <% cartItems.forEach(item => { %>
                <tr class="align-middle">
                  <td>
                    <div class="d-flex gap-2">
                      <img src="<%= item.image %>" alt="<%= item.name %>" class="img-fluid align-self-center">
                      <div class="text-start">
                        <p class="fw-bold m-0"><%= item.name %></p>
                        <p class="m-0 text-black-50" style="font-size: 14px;">Size: <%= item.size %> <span class="ms-1"> | Color: <%= item.color %></span></p>
                        <p class="m-0 fw-bold" style="font-size: 14px;">&#8377;<%= item.discountedPrice.toFixed(2) %></p>
                        <p class="m-0 <%= item.inventoryStatus === 'In stock' ? 'stock': 'stock-out' %>" style="width: max-content;">
                          <%= item.inventoryStatus %>
                        </p>
                      </div>
                    </div>
                  </td>
                  <td>
                    <div class="d-flex justify-content-center">
                      <div class="d-flex quantity-selector">
                        <button type="button" class="btn count-btn decrement-btn" data-product-id="<%= item.productId._id %>" data-variant-id="<%= item.variantId %>" data-size="<%= item.size %>" data-price="<%= item.discountedPrice %>">-</button>
                        <input type="text" class="quantity-input form-control text-center" value="<%= item.quantity %>" readonly>
                        <button type="button" class="btn count-btn increment-btn" data-product-id="<%= item.productId._id %>" data-variant-id="<%= item.variantId %>" data-size="<%= item.size %>" data-price="<%= item.discountedPrice %>">+</button>
                      </div>
                    </div>
                  </td>
                  <td class="fw-bold subtotalDisplay">&#8377;<%= item.total.toFixed(2) %></td>
                  <td>
                    <i class="bi bi-trash" style="color: #DC3545; cursor: pointer;" data-product-id="<%= item.productId._id %>" data-variant-id="<%= item.variantId %>"></i>
                  </td>
                </tr>
              <% }) %>
            </tbody>
          </table>
        </div>

        <!-- Mobile View -->
        <% cartItems.forEach(item => { %>
          <div class="d-flex shadow-sm gap-3 mb-3 rounded mobile-card d-md-none">
            <img src="<%= item.image %>" alt="" class="image-fluid-sm rounded-start">
            <div class="d-flex flex-column w-100">
              <div class="d-flex justify-content-between">
                <p class="fw-bold m-0"><%= item.name %></p>
                <i class="bi bi-trash px-3" style="color: #DC3545; cursor: pointer;" data-product-id="<%= item.productId._id %>" data-variant-id="<%= item.variantId %>"></i>
              </div>
              <p class="m-0 text-black-50" style="font-size: 14px;">
                Size: <%= item.size %> <span class="ms-1"> | Color: <%= item.color %></span>
              </p>
              <p class="m-0 fw-bold subtotalDisplay" style="font-size: 14px;">&#8377;<%= item.total.toFixed(2) %></p>
              <div class="d-flex quantity-selector">
                <button type="button" class="btn count-btn decrement-btn" data-product-id="<%= item.productId._id %>" data-variant-id="<%= item.variantId %>" data-size="<%= item.size %>" data-price="<%= item.discountedPrice %>">-</button>
                <input type="text" class="quantity-input form-control text-center" value="<%= item.quantity %>" readonly>
                <button type="button" class="btn count-btn increment-btn" data-product-id="<%= item.productId._id %>" data-variant-id="<%= item.variantId %>" data-size="<%= item.size %>" data-price="<%= item.discountedPrice %>">+</button>
              </div>
            </div>
          </div>
        <% }) %>
      </div>

      <!-- Summary Section -->
      <div class="col-lg-4 col-md-12">
        <div class="shadow-sm p-3">
          <h5>Summary</h5>
          <hr>
          <div class="d-flex justify-content-between">
            <p class="mb-2">Subtotal</p>
            <p class="mb-2" id="subtotalAmount">&#8377;<%= cartSummary.subtotal.toFixed(2) %></p>
          </div>
          <div class="d-flex justify-content-between">
            <p class="mb-2">Discount</p>
            <p class="mb-2" id="discount"><%= cartSummary.couponDiscount.toFixed(2) %></p>
          </div>
          <div class="d-flex justify-content-between">
            <p class="mb-2">Delivery Charge</p>
            <p class="mb-2" id="deliveryCharge">
              <%- cartSummary.deliveryCharge > 0 ? `&#8377;${cartSummary.deliveryCharge.toFixed(2)}` : `<del>&#8377;40.00</del> Free` -%>
            </p>
          </div>
          <hr>
          <div class="d-flex justify-content-between">
            <p class="fw-bold">Grand Total</p>
            <p class="fw-bold" id="grandTotal">&#8377;<%= cartSummary.grandTotal.toFixed(2) %></p>
          </div>
          <a href="/protected/checkout/shipping"><button class="btn btn-dark w-100 mt-3" id="checkoutBtn">Proceed to Checkout</button></a>
        </div>
      </div>
    <% } else { %>
      <p>Your Cart is empty</p>
    <% } %>

    <!-- Confirmation Modal -->
    <div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="confirmDeleteModalLabel">Confirm Deletion</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            Are you sure you want to remove this item from cart?
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-danger" id="confirmDeleteButton">Delete</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const maxCount = 3;
    const cartUpdateUrl = '/protected/cart/manage';
    const cartDeleteUrl = '/protected/cart/delete';

    let currentProductId;
    let currentVariantId;

    // Event listener for increment, decrement, and delete buttons
    document.body.addEventListener('click', async function (event) {
      const target = event.target;
      const isIncrement = target.classList.contains('increment-btn');
      const isDecrement = target.classList.contains('decrement-btn');
      const isDelete = target.classList.contains('bi-trash');

      if (isIncrement || isDecrement) {
        const quantityInput = target.parentElement.querySelector('.quantity-input');
        let currentQuantity = parseInt(quantityInput.value);
        const productId = target.getAttribute('data-product-id');
        const variantId = target.getAttribute('data-variant-id');
        const size = target.getAttribute('data-size');
        const price = parseFloat(target.getAttribute('data-price'));

        if (isIncrement && currentQuantity < maxCount) {
          currentQuantity++;
        } else if (isDecrement && currentQuantity > 1) {
          currentQuantity--;
        } else {
          return createToast('Quantity limit reached.', 'error');
        }

        // Update quantity in the input
        quantityInput.value = currentQuantity;

        // Send update request
        await updateCartQuantity(productId, variantId, currentQuantity, size);
      }

      if (isDelete) {
        currentProductId = target.getAttribute('data-product-id');
        currentVariantId = target.getAttribute('data-variant-id');
        const confirmDeleteModal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
        confirmDeleteModal.show();
      }
    });

    // Confirm deletion action
    document.getElementById('confirmDeleteButton').addEventListener('click', async function () {
      await deleteCartItem(currentProductId, currentVariantId);
      const confirmDeleteModal = bootstrap.Modal.getInstance(document.getElementById('confirmDeleteModal'));
      confirmDeleteModal.hide();
      location.reload();
    });

    // Function to update cart quantity
    async function updateCartQuantity(productId, variantId, quantity, size) {
      try {
        const response = await fetch(cartUpdateUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            productId,
            variantId,
            quantity,
            size
          })
        });

        if (!response.ok) throw new Error('Failed to update cart');
        const data = await response.json();

        // Update UI based on returned data
        document.getElementById('subtotalAmount').innerHTML = `&#8377;${data.cartSummary.subtotal.toFixed(2)}`;
        document.getElementById('deliveryCharge').innerHTML = data.cartSummary.deliveryCharge > 0 ? `&#8377;${data.cartSummary.deliveryCharge.toFixed(2)}`: `<del>&#8377;40.00</del>Free`;
          document.getElementById('grandTotal').innerHTML = `&#8377;${data.cartSummary.grandTotal.toFixed(2)}`;

          const subtotalDisplay = document.querySelectorAll('.subtotalDisplay');
          subtotalDisplay.forEach((element, index) => {
            if (data.cartItems[index]) {
              element.innerHTML = `&#8377;${data.cartItems[index].total.toFixed(2)}`;
            }
          });
      } catch (error) {
        console.error(error);
      }
    }

    // Function to delete cart item
    async function deleteCartItem(productId, variantId) {
      try {
        const response = await fetch(cartDeleteUrl, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ productId, variantId })
        });

        if (!response.ok) throw new Error('Failed to delete cart item');
        const result = await response.json();
      } catch (error) {
        console.error(error);
      }
    }
  });
</script>

<%- include('../partials/footer') %>
